# pylint: disable=missing-docstring, pointless-statement, multiple-statements, unused-argument, line-too-long

from typing import Optional, Tuple, NewType
VcmpError = NewType('VcmpError', int)
VcmpServerOption = NewType('VcmpServerOption', int)
VcmpPlayerState = NewType('VcmpPlayerState', int)
VcmpPlayerOption = NewType('VcmpPlayerOption', int)
VcmpPlayerVehicle = NewType('VcmpPlayerVehicle', int)
VcmpEntityPool = NewType('VcmpEntityPool', int)
VcmpVehicleOption = NewType('VcmpVehicleOption', int)
VcmpVehicleSync = NewType('VcmpVehicleSync', int)
VcmpPickupOption = NewType('VcmpPickupOption', int)

Vector = Tuple[float, float, float]
Quaternion = Tuple[float, float, float, float]

struct_size: int = 0

# Plugin system

def get_server_version() -> int: ...

def get_server_settings() -> Optional[Tuple[str, int, int, int]]: ...

# def export_functions(plugin_id: int, function_list: Any, size: int) -> VcmpError: ...

def get_number_of_plugins() -> int: ...

def get_plugin_info(plugin_id: int) -> Optional[Tuple[str, int, int, int]]: ...

def find_plugin(plugin_name: str) -> int: ...

def send_plugin_command(command_identifier: int, command: str) -> VcmpError: ...

def get_time() -> int: ...

def log_message(message: str) -> VcmpError: ...

def get_last_error() -> VcmpError: ...

# Client messages

def send_client_script_data(player_id: int, bytes_: bytes) -> VcmpError: ...

def send_client_message(player_id: int, colour: int, message: str) -> VcmpError: ...

def send_game_message(player_id: int, type_: int, message: str) -> VcmpError: ...

# Server settings

def set_server_name(text: str) -> VcmpError: ...

def get_server_name() -> Optional[str]: ...

def set_max_players(max_players: int) -> VcmpError: ...

def get_max_players() -> int: ...

def set_server_password(password: str) -> VcmpError: ...

def get_server_password() -> Optional[str]: ...

def set_game_mode_text(game_mode: str) -> VcmpError: ...

def get_game_mode_text() -> Optional[str]: ...

def shutdown_server() -> None: ...

# Game environment settings

def set_server_option(option: VcmpServerOption, toggle: bool) -> VcmpError: ...

def get_server_option(option: VcmpServerOption) -> bool: ...

def set_world_bounds(max_x: float, min_x: float, max_y: float, min_y: float) -> None: ...

def get_world_bounds() -> Tuple[float, float, float, float]: ...

def set_wasted_settings(death_timer: int, fade_timer: int, fade_in_speed: float, fade_out_speed: float, fade_colour: int, corpse_fade_start: int, corpse_fade_time: int) -> None: ...

def get_wasted_settings() -> Tuple[int, int, float, float, int, int, int]: ...

def set_time_rate(time_rate: int) -> None: ...

def get_time_rate() -> int: ...

def set_hour(hour: int) -> None: ...

def get_hour() -> int: ...

def set_minute(minute: int) -> None: ...

def get_minute() -> int: ...

def set_weather(weather: int) -> None: ...

def get_weather() -> int: ...

def set_gravity(gravity: float) -> None: ...

def get_gravity() -> float: ...

def set_game_speed(game_speed: float) -> None: ...

def get_game_speed() -> float: ...

def set_water_level(water_level: float) -> None: ...

def get_water_level() -> float: ...

def set_maximum_flight_altitude(height: float) -> None: ...

def get_maximum_flight_altitude() -> float: ...

def set_kill_command_delay(delay: int) -> None: ...

def get_kill_command_delay() -> int: ...

def set_vehicles_forced_respawn_height(height: float) -> None: ...

def get_vehicles_forced_respawn_height() -> float: ...

# Miscellaneous things

def create_explosion(world_id: int, type_: int, x: float, y: float, z: float, responsible_player_id: int, at_ground_level: bool) -> VcmpError: ...

def play_sound(world_id: int, sound_id: int, x: float, y: float, z: float) -> VcmpError: ...

def hide_map_object(model_id: int, tenth_x: int, tenth_y: int, tenth_z: int) -> None: ...

def show_map_object(model_id: int, tenth_x: int, tenth_y: int, tenth_z: int) -> None: ...

def show_all_map_objects() -> None: ...


# Weapon settings

def set_weapon_data_value(weapon_id: int, field_id: int, value: float) -> VcmpError: ...

def get_weapon_data_value(weapon_id: int, field_id: int) -> float: ...

def reset_weapon_data_value(weapon_id: int, field_id: int) -> VcmpError: ...

def is_weapon_data_value_modified(weapon_id: int, field_id: int) -> bool: ...

def reset_weapon_data(weapon_id: int) -> VcmpError: ...

def reset_all_weapon_data() -> None: ...

# Key binds

def get_key_bind_unused_slot() -> int: ...

def get_key_bind_data(bind_id: int) -> Optional[Tuple[bool, int, int, int]]: ...

def register_key_bind(bind_id: int, is_called_on_release: bool, key_one: int, key_two: int, key_three: int) -> VcmpError: ...

def remove_key_bind(bind_id: int) -> VcmpError: ...

def remove_all_key_binds() -> None: ...

# Coordinate blips

def create_coord_blip(index: int, world: int, x: float, y: float, z: float, scale: int, colour: int, sprite: int) -> int: ...

def destroy_coord_blip(index: int) -> VcmpError: ...

def get_coord_blip_info(index: int) -> Optional[Tuple[int, float, float, float, int, int, int]]: ...

# Radios

def add_radio_stream(radio_id: int, radio_name: str, radio_url: str, is_listed: bool) -> VcmpError: ...

def remove_radio_stream(radio_id: int) -> VcmpError: ...

# Spawning and classes

def add_player_class(team_id: int, colour: int, model_index: int, x: float, y: float, z: float, angle: float, weapon_one: int, weapon_one_ammo: int, weapon_two: int, weapon_two_ammo: int, weapon_three: int, weapon_three_ammo: int) -> int: ...

def set_spawn_player_position(x: float, y: float, z: float) -> None: ...

def set_spawn_camera_position(x: float, y: float, z: float) -> None: ...

def set_spawn_camera_look_at(x: float, y: float, z: float) -> None: ...

# Administration

def is_player_admin(player_id: int) -> bool: ...

def set_player_admin(player_id: int, toggle: bool) -> VcmpError: ...

def get_player_ip(player_id: int) -> Optional[str]: ...

def get_player_uid(player_id: int) -> Optional[str]: ...

def get_player_uid2(player_id: int) -> Optional[str]: ...

def kick_player(player_id: int) -> VcmpError: ...

def ban_player(player_id: int) -> VcmpError: ...

def ban_ip(ip_address: str) -> None: ...

def unban_ip(ip_address: str) -> None: ...

def is_ip_banned(ip_address: str) -> None: ...

# Player access and basic info

def get_player_id_from_name(name: str) -> int: ...

def is_player_connected(player_id: int) -> bool: ...

def is_player_streamed_for_player(checked_player_id: int, player_id: int) -> bool: ...

def get_player_key(player_id: int) -> int: ...

def get_player_name(player_id: int) -> Optional[str]: ...

def set_player_name(player_id: int, name: str) -> VcmpError: ...

def get_player_state(player_id: int) -> VcmpPlayerState: ...

def set_player_option(player_id: int, option: VcmpPlayerOption, toggle: bool) -> VcmpError: ...

def get_player_option(player_id: int, option: VcmpPlayerOption) -> bool: ...

# Player world

def set_player_world(player_id: int, world: int) -> VcmpError: ...

def get_player_world(player_id: int) -> int: ...

def set_player_secondary_world(player_id: int, secondary_world: int) -> VcmpError: ...

def get_player_secondary_world(player_id: int) -> int: ...

def get_player_unique_world(player_id: int) -> int: ...

def is_player_world_compatible(player_id: int, world: int) -> bool: ...

# Player class, team, skin, colour

def get_player_class(player_id: int) -> int: ...

def set_player_team(player_id: int, team_id: int) -> VcmpError: ...

def get_player_team(player_id: int) -> int: ...

def set_player_skin(player_id: int, skin_id: int) -> VcmpError: ...

def get_player_skin(player_id: int) -> int: ...

def set_player_colour(player_id: int, colour: int) -> VcmpError: ...

def get_player_colour(player_id: int) -> int: ...

# Player spawn cycle

def is_player_spawned(player_id: int) -> bool: ...

def force_player_spawn(player_id: int) -> VcmpError: ...

def force_player_select(player_id: int) -> VcmpError: ...

def force_all_select() -> None: ...

def is_player_typing(player_id: int) -> bool: ...

# Player money, score, wanted level

def give_player_money(player_id: int, amount: int) -> VcmpError: ...

def set_player_money(player_id: int, amount: int) -> VcmpError: ...

def get_player_money(player_id: int) -> int: ...

def set_player_score(player_id: int, score: int) -> VcmpError: ...

def get_player_score(player_id: int) -> int: ...

def set_player_wanted_level(player_id: int, level: int) -> VcmpError: ...

def get_player_wanted_level(player_id: int) -> int: ...

def get_player_ping(player_id: int) -> int: ...

def get_player_fps(player_id: int) -> float: ...

# Player health and immunity

def set_player_health(player_id: int, health: float) -> VcmpError: ...

def get_player_health(player_id: int) -> float: ...

def set_player_armour(player_id: int, armour: float) -> VcmpError: ...

def get_player_armour(player_id: int) -> float: ...

def set_player_immunity_flags(player_id: int, flags: int) -> VcmpError: ...

def get_player_immunity_flags(player_id: int) -> int: ...

# Player position and rotation

def set_player_position(player_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_player_position(player_id: int) -> Optional[Vector]: ...

def set_player_speed(player_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_player_speed(player_id: int) -> Optional[Vector]: ...

def add_player_speed(player_id: int, x: float, y: float, z: float) -> VcmpError: ...

def set_player_heading(player_id: int, angle: float) -> VcmpError: ...

def get_player_heading(player_id: int) -> float: ...

def set_player_alpha(player_id: int, alpha: int, fade_time: int) -> VcmpError: ...

def get_player_alpha(player_id: int) -> int: ...

def get_player_aim_position(player_id: int) -> Optional[Vector]: ...

def get_player_aim_direction(player_id: int) -> Optional[Vector]: ...

# Player actions and keys

def is_player_on_fire(player_id: int) -> bool: ...

def is_player_crouching(player_id: int) -> bool: ...

def get_player_action(player_id: int) -> int: ...

def get_player_game_keys(player_id: int) -> int: ...

# Player vehicle

def put_player_in_vehicle(player_id: int, vehicle_id: int, slot_index: int, make_room: bool, warp: bool) -> VcmpError: ...

def remove_player_from_vehicle(player_id: int) -> VcmpError: ...

def get_player_in_vehicle_status(player_id: int) -> VcmpPlayerVehicle: ...

def get_player_in_vehicle_slot(player_id: int) -> int: ...

def get_player_vehicle_id(player_id: int) -> int: ...

# Player weapons

def give_player_weapon(player_id: int, weapon_id: int, ammo: int) -> VcmpError: ...

def set_player_weapon(player_id: int, weapon_id: int, ammo: int) -> VcmpError: ...

def get_player_weapon(player_id: int) -> int: ...

def get_player_weapon_ammo(player_id: int) -> int: ...

def set_player_weapon_slot(player_id: int, slot: int) -> VcmpError: ...

def get_player_weapon_slot(player_id: int) -> int: ...

def get_player_weapon_at_slot(player_id: int, slot: int) -> int: ...

def get_player_ammo_at_slot(player_id: int, slot: int) -> int: ...

def remove_player_weapon(player_id: int, weapon_id: int) -> VcmpError: ...

def remove_all_weapons(player_id: int) -> VcmpError: ...


# Player camera

def set_camera_position(player_id: int, pos_x: float, pos_y: float, pos_z: float, look_x: float, look_y: float, look_z: float) -> VcmpError: ...

def restore_camera(player_id: int) -> VcmpError: ...

def is_camera_locked(player_id: int) -> bool: ...


# Player miscellaneous stuff

def set_player_animation(player_id: int, group_id: int, animation_id: int) -> VcmpError: ...

def get_player_standing_on_vehicle(player_id: int) -> int: ...

def get_player_standing_on_object(player_id: int) -> int: ...

def is_player_away(player_id: int) -> bool: ...

def get_player_spectate_target(player_id: int) -> int: ...

def set_player_spectate_target(player_id: int, target_id: int) -> VcmpError: ...

def redirect_player_to_server(player_id: int, ip: str, port: int, nick: str, server_password: str, user_password: str) -> VcmpError: ...

# All entities

def check_entity_exists(entity_pool: VcmpEntityPool, index: int) -> bool: ...

# Vehicles

def create_vehicle(model_index: int, world: int, x: float, y: float, z: float, angle: float, primary_colour: int, secondary_colour: int) -> int: ...

def delete_vehicle(vehicle_id: int) -> VcmpError: ...

def set_vehicle_option(vehicle_id: int, option: VcmpVehicleOption, toggle: bool) -> VcmpError: ...

def get_vehicle_option(vehicle_id: int, option: VcmpVehicleOption) -> bool: ...

def get_vehicle_sync_source(vehicle_id: int) -> int: ...

def get_vehicle_sync_type(vehicle_id: int) -> VcmpVehicleSync: ...

def is_vehicle_streamed_for_player(vehicle_id: int, player_id: int) -> bool: ...

def set_vehicle_world(vehicle_id: int, world: int) -> VcmpError: ...

def get_vehicle_world(vehicle_id: int) -> int: ...

def get_vehicle_model(vehicle_id: int) -> int: ...

def get_vehicle_occupant(vehicle_id: int, slot_index: int) -> int: ...

def respawn_vehicle(vehicle_id: int) -> VcmpError: ...

def set_vehicle_immunity_flags(vehicle_id: int, immunity_flags: int) -> VcmpError: ...

def get_vehicle_immunity_flags(vehicle_id: int) -> int: ...

def explode_vehicle(vehicle_id: int) -> VcmpError: ...

def is_vehicle_wrecked(vehicle_id: int) -> bool: ...

def set_vehicle_position(vehicle_id: int, x: float, y: float, z: float, remove_occupants: bool) -> VcmpError: ...

def get_vehicle_position(vehicle_id: int) -> Optional[Vector]: ...

def set_vehicle_rotation(vehicle_id: int, x: float, y: float, z: float, w: float) -> VcmpError: ...

def set_vehicle_rotation_euler(vehicle_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_vehicle_rotation(vehicle_id: int) -> Optional[Quaternion]: ...

def get_vehicle_rotation_euler(vehicle_id: int) -> Optional[Vector]: ...

def set_vehicle_speed(vehicle_id: int, x: float, y: float, z: float, add: bool, relative: bool) -> VcmpError: ...

def get_vehicle_speed(vehicle_id: int, relative: bool) -> Optional[Vector]: ...

def set_vehicle_turn_speed(vehicle_id: int, x: float, y: float, z: float, add: bool, relative: bool) -> VcmpError: ...

def get_vehicle_turn_speed(vehicle_id: int, relative: bool) -> Optional[Vector]: ...

def set_vehicle_spawn_position(vehicle_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_vehicle_spawn_position(vehicle_id: int) -> Optional[Vector]: ...

def set_vehicle_spawn_rotation(vehicle_id: int, x: float, y: float, z: float, w: float) -> VcmpError: ...

def set_vehicle_spawn_rotation_euler(vehicle_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_vehicle_spawn_rotation(vehicle_id: int) -> Optional[Quaternion]: ...

def get_vehicle_spawn_rotation_euler(vehicle_id: int) -> Optional[Vector]: ...

def set_vehicle_idle_respawn_timer(vehicle_id: int, millis: int) -> VcmpError: ...

def get_vehicle_idle_respawn_timer(vehicle_id: int) -> int: ...

def set_vehicle_health(vehicle_id: int, health: float) -> VcmpError: ...

def get_vehicle_health(vehicle_id: int) -> float: ...

def set_vehicle_colour(vehicle_id: int, primary_colour: int, secondary_colour: int) -> VcmpError: ...

def get_vehicle_colour(vehicle_id: int) -> Optional[Tuple[int, int]]: ...

def set_vehicle_part_status(vehicle_id: int, part_id: int, status: int) -> VcmpError: ...

def get_vehicle_part_status(vehicle_id: int, part_id: int) -> int: ...

def set_vehicle_tyre_status(vehicle_id: int, tyre_id: int, status: int) -> VcmpError: ...

def get_vehicle_tyre_status(vehicle_id: int, tyre_id: int) -> int: ...

def set_vehicle_damage_data(vehicle_id: int, damage_data: int) -> VcmpError: ...

def get_vehicle_damage_data(vehicle_id: int) -> int: ...

def set_vehicle_radio(vehicle_id: int, radio_id: int) -> VcmpError: ...

def get_vehicle_radio(vehicle_id: int) -> int: ...

def get_vehicle_turret_rotation(vehicle_id: int) -> Optional[Tuple[float, float]]: ...

# Vehicle handling

def reset_all_vehicle_handlings() -> None: ...

def exists_handling_rule(model_index: int, rule_index: int) -> bool: ...

def set_handling_rule(model_index: int, rule_index: int, value: float) -> VcmpError: ...

def get_handling_rule(model_index: int, rule_index: int) -> float: ...

def reset_handling_rule(model_index: int, rule_index: int) -> VcmpError: ...

def reset_handling(model_index: int) -> VcmpError: ...

def exists_inst_handling_rule(vehicle_id: int, rule_index: int) -> bool: ...

def set_inst_handling_rule(vehicle_id: int, rule_index: int, value: float) -> VcmpError: ...

def get_inst_handling_rule(vehicle_id: int, rule_index: int) -> float: ...

def reset_inst_handling_rule(vehicle_id: int, rule_index: int) -> VcmpError: ...

def reset_inst_handling(vehicle_id: int) -> VcmpError: ...

# Pickups

def create_pickup(model_index: int, world: int, quantity: int, x: float, y: float, z: float, alpha: int, is_automatic: bool) -> int: ...

def delete_pickup(pickup_id: int) -> VcmpError: ...

def is_pickup_streamed_for_player(pickup_id: int, player_id: int) -> bool: ...

def set_pickup_world(pickup_id: int, world: int) -> VcmpError: ...

def get_pickup_world(pickup_id: int) -> int: ...

def set_pickup_alpha(pickup_id: int, alpha: int) -> VcmpError: ...

def get_pickup_alpha(pickup_id: int) -> int: ...

def set_pickup_is_automatic(pickup_id: int, toggle: bool) -> VcmpError: ...

def is_pickup_automatic(pickup_id: int) -> bool: ...

def set_pickup_auto_timer(pickup_id: int, duration_millis: int) -> VcmpError: ...

def get_pickup_auto_timer(pickup_id: int) -> int: ...

def refresh_pickup(pickup_id: int) -> VcmpError: ...

def set_pickup_position(pickup_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_pickup_position(pickup_id: int) -> Optional[Vector]: ...

def get_pickup_model(pickup_id: int) -> int: ...

def get_pickup_quantity(pickup_id: int) -> int: ...

# Checkpoints

def create_check_point(player_id: int, world: int, is_sphere: bool, x: float, y: float, z: float, red: int, green: int, blue: int, alpha: int, radius: float) -> int: ...

def delete_check_point(check_point_id: int) -> VcmpError: ...

def is_check_point_streamed_for_player(check_point_id: int, player_id: int) -> bool: ...

def is_check_point_sphere(check_point_id: int) -> bool: ...

def set_check_point_world(check_point_id: int, world: int) -> VcmpError: ...

def get_check_point_world(check_point_id: int) -> int: ...

def set_check_point_colour(check_point_id: int, red: int, green: int, blue: int, alpha: int) -> VcmpError: ...

def get_check_point_colour(check_point_id: int) -> Optional[Tuple[int, int, int, int]]: ...

def set_check_point_position(check_point_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_check_point_position(check_point_id: int) -> Optional[Vector]: ...

def set_check_point_radius(check_point_id: int, radius: float) -> VcmpError: ...

def get_check_point_radius(check_point_id: int) -> float: ...

def get_check_point_owner(check_point_id: int) -> int: ...

# Objects

def create_object(model_index: int, world: int, x: float, y: float, z: float, alpha: int) -> int: ...

def delete_object(object_id: int) -> VcmpError: ...

def is_object_streamed_for_player(object_id: int, player_id: int) -> bool: ...

def get_object_model(object_id: int) -> int: ...

def set_object_world(object_id: int, world: int) -> VcmpError: ...

def get_object_world(object_id: int) -> int: ...

def set_object_alpha(object_id: int, alpha: int, duration: int) -> VcmpError: ...

def get_object_alpha(object_id: int) -> int: ...

def move_object_to(object_id: int, x: float, y: float, z: float, duration: int) -> VcmpError: ...

def move_object_by(object_id: int, x: float, y: float, z: float, duration: int) -> VcmpError: ...

def set_object_position(object_id: int, x: float, y: float, z: float) -> VcmpError: ...

def get_object_position(object_id: int) -> Optional[Vector]: ...

def rotate_object_to(object_id: int, x: float, y: float, z: float, w: float, duration: int) -> VcmpError: ...

def rotate_object_to_euler(object_id: int, x: float, y: float, z: float, duration: int) -> VcmpError: ...

def rotate_object_by(object_id: int, x: float, y: float, z: float, w: float, duration: int) -> VcmpError: ...

def rotate_object_by_euler(object_id: int, x: float, y: float, z: float, duration: int) -> VcmpError: ...

def get_object_rotation(object_id: int) -> Optional[Quaternion]: ...

def get_object_rotation_euler(object_id: int) -> Optional[Vector]: ...

def set_object_shot_report_enabled(object_id: int, toggle: bool) -> VcmpError: ...

def is_object_shot_report_enabled(object_id: int) -> bool: ...

def set_object_touched_report_enabled(object_id: int, toggle: bool) -> VcmpError: ...

def is_object_touched_report_enabled(object_id: int) -> bool: ...


# TODO: MOVE LATER
def get_player_module_list(player_id: int) -> VcmpError: ...

def set_pickup_option(pickup_id: int, option: VcmpPickupOption, toggle: bool) -> VcmpError: ...

def get_pickup_option(pickup_id: int, option: VcmpPickupOption) -> bool: ...

def set_fall_timer(time_rate: int) -> None: ...

def get_fall_timer() -> int: ...

def set_vehicle_lights_data(vehicle_id: int, lights_data: int) -> VcmpError: ...

def get_vehicle_lights_data(vehicle_id: int) -> int: ...
